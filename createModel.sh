lower=$(echo $1 | tr '[:upper:]' '[:lower:]')
echo 'package db'
echo ''
echo 'import ('
echo '	"github.com/gin-gonic/gin"'
echo '	"net/http"'
echo ''
echo ')'
echo ''
echo 'type '$lower' struct {'
echo '		Id        string    `json:"id" gorm:"column:id;primary_key;AUTO_INCREMENT "`'
echo '		Type_name string `json:"type_name" gorm:"column:type_name;not null"`'
echo ''
echo '	}'
echo ''
echo ''
echo 'func Crud'$1'(app *gin.RouterGroup) {'
echo ''
echo '	app.GET("/", getAll'$1')'
echo '	app.GET("/:id", getOne'$1')'
echo '	app.POST("/", add'$1')'
echo '	app.DELETE("/:id", delete'$1')'
echo '	app.PUT("/:id", update'$1')'
echo ''
echo '}'
echo ''
echo ''
echo 'func getAll'$1'(c *gin.Context) {'
echo ''
echo '	var items [] '$lower
echo '	db, err := OpenDb()'
echo '	defer db.Close()'
echo ''
echo '	if err != nil {'
echo '		c.JSON(http.StatusInternalServerError, gin.H{"message": err.Error()})'
echo '	} else {'
echo '		db.Find(&items)'
echo ''
echo '		if len(items) <= 0 {'
echo '			c.JSON(http.StatusNotFound, gin.H{"status": http.StatusNotFound, "message": "No '$1' found!"})'
echo '			return'
echo '		}'
echo ''
echo '		c.JSON(http.StatusOK, gin.H{"status": http.StatusOK, "data": items})'
echo '	}'
echo '}'
echo ''
echo 'func getOne'$1'(c *gin.Context) {'
echo '	truckID := c.Param("id")'
echo '	db, err := OpenDb()'
echo '	defer db.Close()'
echo ''
echo '	if err != nil {'
echo '		c.JSON(http.StatusInternalServerError, gin.H{"message": err.Error()})'
echo '	} else {'
echo '		var items [] '$lower
echo ''
echo '		db.First(&items, truckID)'
echo ''
echo '		if len(items) <= 0 {'
echo ''
echo '			c.JSON(http.StatusNotFound, gin.H{"status": http.StatusNotFound, "message": "No '$1' found!"})'
echo ''
echo '			return'
echo '		}'
echo ''
echo '		c.JSON(http.StatusOK, gin.H{"status": http.StatusOK, "data": items})'
echo '	}'
echo '}'
echo ''
echo ''
echo 'func add'$1'(c *gin.Context) {'
echo ''
echo '	var item '$lower
echo ''
echo '	db, err := OpenDb()'
echo '	defer db.Close()'
echo ''
echo '	if err != nil {'
echo '		c.JSON(http.StatusInternalServerError, gin.H{"message": err.Error()})'
echo '	} else {'
echo '		c.BindJSON(&item);'
echo '		if err := db.Create(&item).Error; err != nil {'
echo '			c.JSON(http.StatusInternalServerError, gin.H{"message": err.Error()})'
echo '		} else {'
echo '			c.JSON(http.StatusCreated, item)'
echo '		}'
echo '	}'
echo '}'
echo ''
echo ''
echo 'func delete'$1'(c *gin.Context) {'
echo ''
echo '	var item '$lower
echo ''
echo '	db, err := OpenDb()'
echo '	defer db.Close()'
echo ''
echo '	if err != nil {'
echo '		c.JSON(http.StatusInternalServerError, gin.H{"message": err.Error()})'
echo '	} else {'
echo '		id := c.Params.ByName("id")'
echo ''
echo '		if err := db.Where("id = ?", id).First(&item).Error; err != nil {'
echo '			c.JSON(http.StatusNotFound, gin.H{"message": err.Error()})'
echo '		} else {'
echo '			db.Delete(&item)'
echo '			c.JSON(http.StatusOK, "Object "+id+" Deleted")'
echo '		}'
echo '	}'
echo '}'
echo ''
echo 'func update'$1'(c *gin.Context) {'
echo ''
echo '	var item '$lower
echo '	id := c.Params.ByName("id")'
echo ''
echo '	db, err := OpenDb()'
echo '	defer db.Close()'
echo ''
echo '	if err != nil {'
echo '		c.JSON(http.StatusInternalServerError, gin.H{"message": err.Error()})'
echo '	} else {'
echo '		if err := db.Where("id = ?", id).First(&item).Error; err != nil {'
echo '			c.JSON(http.StatusNotFound, gin.H{"message": err.Error()})'
echo '		} else {'
echo '			if err := c.BindJSON(&item); err != nil {'
echo '				c.JSON(http.StatusBadRequest, gin.H{"message": err.Error()})'
echo '			} else {'
echo '				db.Save(&item)'
echo '				c.JSON(http.StatusOK, item)'
echo '			}'
echo '		}'
echo '	}'
echo '}'